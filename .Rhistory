waveiii_survey <- waveiii_survey[1:4,]
View(waveiii_survey)
waveiii_survey <- read_dta(paste0(box_loc, "/arabbarometer/ABWaveIIIPalestinewLocation.dta"))
waveiii_survey <- waveiii_survey[,1:4]
View(waveiii_survey)
waveiii_survey <- read_dta(paste0(box_loc, "/arabbarometer/ABWaveIIIPalestinewLocation.dta"))
waveiii_survey <- waveiii_survey[,1:10]
View(waveiii_survey)
rm(list = ls())
git_loc <- "/Users/christianbaehr/GitHub/westbank_inpii"
box_loc <- "/Users/christianbaehr/Box Sync/westbank_inpii"
library(haven)
library(sf)
waveiii <- st_read(paste0(box_loc, "/arabbarometer/waveiii_final.geojson"))
waveiii_survey <- read_dta(paste0(box_loc, "/arabbarometer/ABWaveIIIPalestinewLocation.dta"))
waveiii_survey <- waveiii_survey[,1:10]
View(waveiii_survey)
summary(waveiii_survey$v03)
summary(waveiii_survey$v04)
summary(waveiii_survey$v05)
waveiv_survey <- read_dta(paste0(box_loc, "/arabbarometer/ABWaveIVPalestinewLocation.dta"))
View(waveiv_survey)
length(unique(waveiii_survey$v05aENG))
rm(list = ls())
git_loc <- "/Users/christianbaehr/GitHub/westbank_inpii"
box_loc <- "/Users/christianbaehr/Box Sync/westbank_inpii"
library(haven)
library(sf)
waveiii <- st_read(paste0(box_loc, "/arabbarometer/waveiii_final.geojson"))
waveiii_survey <- read_dta(paste0(box_loc, "/arabbarometer/ABWaveIIIPalestinewLocation.dta"))
waveiii_survey <- waveiii_survey[,1:10]
waveiii_test <- merge(waveiii, waveiii_survey, by = "qid")
View(waveiii_survey)
View(waveiii)
test <- merge(waveiii, waveiii_survey, by = "v05aENG")
unique(waveiii$v05aENG[!waveiii$v05aENG %in% waveiii_survey$v05aENG])
waveiii <- st_read(paste0(box_loc, "/arabbarometer/waveiii_final.geojson"), stringsAsFactors = F)
waveiii_survey <- read_dta(paste0(box_loc, "/arabbarometer/ABWaveIIIPalestinewLocation.dta"))
waveiii_survey <- waveiii_survey[,1:10]
test <- merge(waveiii, waveiii_survey, by = "v05aENG")
unique(waveiii$v05aENG[!waveiii$v05aENG %in% waveiii_survey$v05aENG])
unique(waveiii_survey$v05aENG[!waveiii_survey$v05aENG %in% waveiii$v05aENG])
waveiii$v05aENG[waveiii$v05aENG=='Al-Fandak (NEW)'] <- 'Al-Fandak'
git_loc <- "/Users/christianbaehr/GitHub/westbank_inpii"
box_loc <- "/Users/christianbaehr/Box Sync/westbank_inpii"
library(haven)
library(sf)
waveiii <- st_read(paste0(box_loc, "/arabbarometer/waveiii_final.geojson"), stringsAsFactors = F)
waveiii$v05aENG[waveiii$v05aENG=='Al-Fandak (NEW)'] <- 'Al-Fandak'
waveiii$v05aENG[waveiii$v05aENG=='Aldahya (New)'] <- 'Aldahya'
waveiii$v05aENG[waveiii$v05aENG=='AL-Izarya'] <- 'Al_Izarya'
waveiii$v05aENG[waveiii$v05aENG=='Kalkleya'] <- 'Kalkelya'
waveiii_survey <- read_dta(paste0(box_loc, "/arabbarometer/ABWaveIIIPalestinewLocation.dta"))
waveiii_survey <- waveiii_survey[,1:10]
test <- merge(waveiii, waveiii_survey, by = "v05aENG")
unique(waveiii$v05aENG[!waveiii$v05aENG %in% waveiii_survey$v05aENG])
unique(waveiii_survey$v05aENG[!waveiii_survey$v05aENG %in% waveiii$v05aENG])
git_loc <- "/Users/christianbaehr/GitHub/westbank_inpii"
box_loc <- "/Users/christianbaehr/Box Sync/westbank_inpii"
library(haven)
library(sf)
waveiii <- st_read(paste0(box_loc, "/arabbarometer/waveiii_final.geojson"), stringsAsFactors = F)
# waveiii$v05aENG[waveiii$v05aENG=='Al-Fandak (NEW)'] <- 'Al-Fandak'
# waveiii$v05aENG[waveiii$v05aENG=='Aldahya (New)'] <- 'Aldahya'
# waveiii$v05aENG[waveiii$v05aENG=='AL-Izarya'] <- 'Al_Izarya'
# waveiii$v05aENG[waveiii$v05aENG=='Kalkleya'] <- 'Kalkelya'
waveiii_survey <- read_dta(paste0(box_loc, "/arabbarometer/ABWaveIIIPalestinewLocation.dta"))
waveiii_survey <- waveiii_survey[,1:10]
test <- merge(waveiii, waveiii_survey, by = "v05aENG")
unique(waveiii$v05aENG[!waveiii$v05aENG %in% waveiii_survey$v05aENG])
unique(waveiii_survey$v05aENG[!waveiii_survey$v05aENG %in% waveiii$v05aENG])
git_loc <- "/Users/christianbaehr/GitHub/westbank_inpii"
box_loc <- "/Users/christianbaehr/Box Sync/westbank_inpii"
library(haven)
library(sf)
waveiii <- st_read(paste0(box_loc, "/arabbarometer/waveiii_final.geojson"), stringsAsFactors = F)
waveiii$v05aENG[waveiii$v05aENG=='Al-Fandak (NEW)'] <- 'Al-Fandak'
waveiii$v05aENG[waveiii$v05aENG=='Aldahya (New)'] <- 'Aldahya'
waveiii$v05aENG[waveiii$v05aENG=='AL-Izarya'] <- 'Al_Izarya'
waveiii$v05aENG[waveiii$v05aENG=='Kalkleya'] <- 'Kalkelya'
waveiii_survey <- read_dta(paste0(box_loc, "/arabbarometer/ABWaveIIIPalestinewLocation.dta"))
waveiii_survey <- waveiii_survey[,1:10]
test <- merge(waveiii, waveiii_survey, by = "v05aENG")
unique(waveiii$v05aENG[!waveiii$v05aENG %in% waveiii_survey$v05aENG])
unique(waveiii_survey$v05aENG[!waveiii_survey$v05aENG %in% waveiii$v05aENG])
git_loc <- '/Users/christianbaehr/GitHub/westbank_inpii'
box_loc <- '/Users/christianbaehr/Box Sync/westbank_inpii'
library(haven)
library(sf)
waveiii <- st_read(paste0(box_loc, '/arabbarometer/waveiii_final.geojson'), stringsAsFactors = F)
waveiii$v05aENG[waveiii$v05aENG=='Al-Fandak (NEW)'] <- 'Al-Fandak'
waveiii$v05aENG[waveiii$v05aENG=='Aldahya (New)'] <- 'Aldahya'
waveiii$v05aENG[waveiii$v05aENG=='AL-Izarya'] <- 'Al_Izarya'
waveiii$v05aENG[waveiii$v05aENG=='Kalkleya'] <- 'Kalkelya'
waveiii_survey <- read_dta(paste0(box_loc, '/arabbarometer/ABWaveIIIPalestinewLocation.dta'))
waveiii_survey <- waveiii_survey[,1:10]
test <- merge(waveiii, waveiii_survey, by = 'v05aENG')
unique(waveiii$v05aENG[!waveiii$v05aENG %in% waveiii_survey$v05aENG])
unique(waveiii_survey$v05aENG[!waveiii_survey$v05aENG %in% waveiii$v05aENG])
git_loc <- '/Users/christianbaehr/GitHub/westbank_inpii'
box_loc <- '/Users/christianbaehr/Box Sync/westbank_inpii'
library(haven)
library(sf)
waveiii <- st_read(paste0(box_loc, '/arabbarometer/waveiii_final.geojson'), stringsAsFactors = F)
waveiii$v05aENG[waveiii$v05aENG=='Al-Fandak (NEW)'] <- 'Al-Fandak'
waveiii$v05aENG[waveiii$v05aENG=='Aldahya (New)'] <- 'Aldahya'
waveiii$v05aENG[waveiii$v05aENG=='AL-Izarya'] <- 'Al_Izarya'
waveiii$v05aENG[waveiii$v05aENG=='Kalkleya'] <- 'Kalkelya'
waveiii_survey <- read_dta(paste0(box_loc, '/arabbarometer/ABWaveIIIPalestinewLocation.dta'))
waveiii_survey <- waveiii_survey[,1:20]
test <- merge(waveiii, waveiii_survey, by = 'v05aENG')
unique(waveiii$v05aENG[!waveiii$v05aENG %in% waveiii_survey$v05aENG])
unique(waveiii_survey$v05aENG[!waveiii_survey$v05aENG %in% waveiii$v05aENG])
unique(waveiii_survey$v03)
summary(test$v03.x)
summary(test$v03.y)
unique(waveiii_survey$v03[!waveiii_survey$v05aENG %in% waveiii$v05aENG, ])
unique(waveiii_survey$v03[!waveiii_survey$v05aENG %in% waveiii$v05aENG])
summary(waveiii_survey$v03[!waveiii_survey$v05aENG %in% waveiii$v05aENG])
View(waveiii_survey[!waveiii_survey$v05aENG %in% waveiii$v05aENG, ])
View(waveiii_survey[!waveiii_survey$v05aENG %in% waveiii$v05aENG & waveiii_survey$v03==1, ])
View(waveiii)
git_loc <- '/Users/christianbaehr/GitHub/westbank_inpii'
box_loc <- '/Users/christianbaehr/Box Sync/westbank_inpii'
library(haven)
library(sf)
waveiii <- st_read(paste0(box_loc, '/arabbarometer/waveiii_final.geojson'), stringsAsFactors = F)
waveiii$v05aENG[waveiii$v05aENG=='Al-Fandak (NEW)'] <- 'Al-Fandak'
waveiii$v05aENG[waveiii$v05aENG=='Aldahya (New)'] <- 'Aldahya'
waveiii$v05aENG[waveiii$v05aENG=='AL-Izarya'] <- 'Al_Izarya'
waveiii$v05aENG[waveiii$v05aENG=='Kalkleya'] <- 'Kalkelya'
waveiii_survey <- read_dta(paste0(box_loc, '/arabbarometer/ABWaveIIIPalestinewLocation.dta'))
waveiii_survey <- waveiii_survey[,1:20]
View(waveiii)
View(waveiii_survey)
git_loc <- '/Users/christianbaehr/GitHub/westbank_inpii'
box_loc <- '/Users/christianbaehr/Box Sync/westbank_inpii'
library(haven)
library(sf)
waveiii <- st_read(paste0(box_loc, '/arabbarometer/waveiii_final.geojson'), stringsAsFactors = F)
waveiii$v05aENG[waveiii$v05aENG=='Al-Fandak (NEW)'] <- 'Al-Fandak'
waveiii$v05aENG[waveiii$v05aENG=='Aldahya (New)'] <- 'Aldahya'
waveiii$v05aENG[waveiii$v05aENG=='AL-Izarya'] <- 'Al_Izarya'
waveiii$v05aENG[waveiii$v05aENG=='Kalkleya'] <- 'Kalkelya'
waveiii_survey <- read_dta(paste0(box_loc, '/arabbarometer/ABWaveIIIPalestinewLocation.dta'))
waveiii_survey <- waveiii_survey[,1:20]
waveiii_test <- merge(waveiii, waveiii_survey, by = "qid")
View(waveiii_test)
waveiii_survey <- read_dta(paste0(box_loc, '/arabbarometer/ABWaveIIIPalestinewLocation.dta'))
View(waveiii_survey)
names(waveiii_survey)
git_loc <- '/Users/christianbaehr/GitHub/westbank_inpii'
box_loc <- '/Users/christianbaehr/Box Sync/westbank_inpii'
library(haven)
library(sf)
waveiii <- st_read(paste0(box_loc, '/arabbarometer/waveiii_final.geojson'), stringsAsFactors = F)
waveiii$v05aENG[waveiii$v05aENG=='Al-Fandak (NEW)'] <- 'Al-Fandak'
waveiii$v05aENG[waveiii$v05aENG=='Aldahya (New)'] <- 'Aldahya'
waveiii$v05aENG[waveiii$v05aENG=='AL-Izarya'] <- 'Al_Izarya'
waveiii$v05aENG[waveiii$v05aENG=='Kalkleya'] <- 'Kalkelya'
waveiii_survey <- read_dta(paste0(box_loc, '/arabbarometer/ABWaveIIIPalestinewLocation.dta'))
waveiii_survey <- waveiii_survey[,1:20]
waveiii_test <- merge(waveiii, waveiii_survey, by = "qid")
length(unique(waveiii_survey$qid))
View(waveiii_survey)
length(unique(waveiii_survey$v05aENG))
table(waveiii_survey$v05aENG)
rm(list = ls())
1L
class(2)
class(1+2i
)
class(1+2)
1L
5+2i
class(2i)
class(i)
i=10
class(2i)
rm(i)
class(c(1, 2, 3))
help(complex)
"Hi" +2
sum(TRUE)
TRUE*3
class(NA)
class(NULL)
class(NaN)
0 == FALSE
1 == TRUE
T
TRUE + 10
FALSE * 3
TRUE + 10
#note: we can abbreviate TRUE/FALSE with T/F
T
#note: we can abbreviate TRUE/FALSE with T/F
F
"This won't work" * 2
#this
"My name is Christian"
#is different than
c("My", "name", "is", "Christian")
mean(TRUE, FALSE, FALSE)
mean(c(TRUE, FALSE, FALSE))
help(grep)
## Character values are generally used to communicate more complex
## information than numeric or binary values. We thus have some
## unique tools to deal with these values
grepl(pattern = "Chris", x = "My name is Christian")
grepl(pattern = "Chris", x = c("My", "name", "is", "Christian"))
grep(pattern = "Chris", x = c("My", "name", "is", "Christian"))
countrycode::codelist
cars
mtcars
library(stringr)
str_locate("Chris", "My name is Christian")
help("str_locate")
str_locate("My name is Christian", "Chris")
substr("My name is Christian", 12, 16)
help(substr)
install.packages("stringr")
install.packages("stringr")
library(stringr)
str_locate(string = "My name is Christian", pattern = "Chris")
substr(x = "My name is Christian", start = 12, stop = 16)
help("str_locate")
typeof("hi")
class("hi")
grepl(pattern = "chip", x = "The cuddly chipmunk has adverse intentions")
grepl(pattern = "chip", x = "The cuddly chipmunk has adverse intentions")
grepl(pattern = "chip", x = c("The","cuddly","chipmunk","has","adverse","intentions"))
grep(pattern = "chip", x = c("The","cuddly","chipmunk","has","adverse","intentions"))
str_locate(string = "The cuddly chipmunk has adverse intentions", pattern = "chip")
substr(x = "The cuddly chipmunk has adverse intentions", start = 12, stop = 16)
substr(x = "The cuddly chipmunk has adverse intentions", start = 12, stop = 15)
help(substr)
## We can identify the type of value using class()
class("a")
class(2)
## Or by testing for a specific type
is.numeric()
## Or by testing for a specific type
is.numeric("Hello")
is.numeric(c(2, 4, 6))
is.numeric(2)
is.logical(FALSE)
## Some values can take on different types
is.character("2")
is.numeric(2)
## And we can change them manually
as.numeric("2")
## And we can change them manually
as.numeric("2") * 10
as.logical("FALSE")
as.logical("TRUE") + 4
as.complex(0:5)
0i
0i==0
as.complex(c(10, 20, 30))
colors<-c(red, yellow, blue) # what happens if we don't use quotes?
## We can divide a string into multiple pieces
strsplit("The cuddly chipmunk has adverse intentions", split = " ")
paste(c("The","cuddly","chipmunk","has","adverse","intentions"))
help(paste)
## Or squish a bunch of character objects into a single one
paste(c("The","cuddly","chipmunk","has","adverse","intentions"), collapse = " ")
c("Christian", 2, 8)
c("Pinocchio's", "nose", "is", 18, "millimeters", "long")
class(c("Pinocchio's", "nose", "is", 18, "millimeters", "long"))
c(5, 4, 3, 2, FALSE)
c(5, 4, 3, 2, TRUE)
class(c("a", 1))
c(TRUE, 15L)
class(c(TRUE, 15L))
class(TRUE)
class(c(TRUE, 15L))
class(c(TRUE, 15L, 35))
class(c(TRUE, 15L, 35, "45"))
c(TRUE, 15L, 35, "45")
class(c(TRUE, 15L, 35, "Pinocchio"))
## Useful trick:
c(TRUE, FALSE, TRUE, FALSE) *1
class(xx)
state.x77
## Vectors are always 1 x n dimensions
states <- state.name
## Vectors are always 1 x n dimensions
states <- states
help(sgrepl)
help(grepl)
grepl(pattern = "A", x = states)
grepl(pattern = "A", x = states, value = T)
grep(pattern = "A", x = states, value = T)
grep(pattern = "A", x = states)
## We can extract parts of them
states[1]
states[1:4]
## Trick to creating numeric vectors:
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
c(1:20)
firstway <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
secondway <- c(1:20)
firstway==secondway
all.equal(firstway, secondway)
## Alternatively we could just stick the "grep" call in the brackets
states[grep(pattern = "A", x = states)]
prod
prod(firstway)
length(firstway)
prod(firstway)
cumsum(firstway)
cumprod(firstway)
df <- mtcars
View(df)
mat <- matrix(data = runif(25), nrow = 5)
mat
View(mat)
matrix(data = rep("Hello",25))
help("matrix")
numbers
cars <- c("Ford", "Honda", "Ferrari", "Honda")
factor(cars)
factor(cars)
cars <- factor(cars)
cars <- factor(cars)
cars[1]
class(cars)
levels(cars)
c(cars)
mean(cars)
grp<- c("control", "treatment", "control", "treatment")
grp
grp<-factor(grp)
grp
class(grp) # The devil.  Some functions require factors.  But if you can .. avoid.
levels(grp)
c(grp)
mean(grp)
as.integer(grp) # There are lots of "as.class()" functions you can look up
is.integer(x) # can also test if an object meets specific standards
state.abb
as.character(cars)
as.character(cars)
help("matrix")
runif(100)
dim(mat)
t(mat)
## We can add rows or columns to a matrix
cbind(mat, c(1:5))
rbind(mat, c(10:15))
rbind(mat, c(11:15))
mat <- rbind(mat, c(11:15))
mat[1:5, 1:5]
mat[c(T, T, T, T, T, F),]
mat[c(T, T, T, T, T, F), ]
mat[-6, ]
lower.tri(mat)
mat[lower.tri(mat)]
mat <- mat[-6, ] #select which rows to drop instead of which to keep
lower.tri(mat) #logical function - is element [m, n] in the lower triangle?
mat[lower.tri(mat)]
colSums(mat)
rowMeans(mat)
mean(mat)
cbind(seq(1,3), seq(2, 4), seq(3,5))
1/cbind(seq(1,3), seq(2, 4), seq(3,5)) # most basic function continue to be "element wise"
sum(mat)
mat * 100
mat %*% mat
t(mat) %*% mat
c(1,2,3)%*%c(1,2,3)
matrix(c(1,2,3), ncol=1)%*%c(1,2,3) # outer product
mat %*% mat
mat
0.8807058^2
c(1,2,3)
matrix(c(1,2,3), ncol=1)
matrix(c(1,2,3), ncol=1)%*%c(1,2,3) # outer product
H3%*%invH3 ## close enough?
solve(mat)
solve(mat) %*% mat
solve(mat) %*% mat
help(solve)
solve(mat)
solve(mat) %*% mat #Echelon form
help("solve")
mat %*% solve(mat) #Echelon form
b<-c(1,2,3)
b
solve(H3, b)
H3<-matrix(c(1, 1/2, 1/3, 1/2, 1/3, 1/4, 1/3, 1/4, 1/5), nrow=3)
H3
1/cbind(seq(1,3), seq(2, 4), seq(3,5)) # most basic function continue to be "element wise"
H3+1
H3*2
H3^2
mean(H3) # others will treat the matrix as a vector no matter what
rowSums(H3) # others work on matrices in particular ways (more on this later)
colSums(H3)
rowMeans(H3)
colMeans(H3)
# logicals too
H3==1
H3 == c(1,2,3) # wha...?
H3 == H3
all(H3 == H3)
# Some work like they do in the math books
det(H3) # the determinant -- hard for you ... easy in R
diag(H3) # get the diagonal elements of amatrix
diag(1, nrow=3) # make a 3by3 identity matrix
t(H3) # matrix transpose
Hnew<-H3
Hnew[lower.tri(H3, diag=TRUE)] # extract the lower triangular elements of H3
# Get the trace
trace<- function(data) (sum(diag(data))) # our own little function .. more on this next time
trace(H3)
# Matrix multipication
t(H3)%*%H3
c(1,2,3)%*%c(1,2,3) # dot product
matrix(c(1,2,3), ncol=1)%*%c(1,2,3) # outer product
#matrix inversion
solve(H3)
invH3<-solve(H3)
H3%*%invH3 ## close enough?
# Why is it called solve?  It can also be used to solve linear systems.
b<-c(1,2,3)
b
solve(H3, b)
solve(a = mat, b = c(1:5))
solve(H3, b)
#matrix inversion
solve(H3)
#matrix inversion
solve(H3)
invH3<-solve(H3)
H3%*%invH3 ## close enough?
mat %*% mat
help(%*%)
help("%*%")
mat %*% matrix(data = c(1:15), nrow = 5) #multiply two matrices
mat %*% matrix(data = c(1:15), nrow = 3) #multiply two matrices
mat %*% matrix(data = c(1:15), nrow = 5) #multiply two matrices
matrix(data = c(1:15),nrow=5)
solve(mat) %*% mat
mat %*% solve(mat)
invH3<-solve(H3)
H3%*%invH3 ## clo
mat %*% matrix(data = c(1:15),nrow=5) #multiply two matrices (if conformable)
solve(mat) #inverted version of mat
mat %*% solve(mat)
## We can use the solve command to solve linear systems
solve(a = mat, b = c(1:5))
### Is the number of votes cast positively related to number of voting age voters?
lm(Tot.Turnout~VAP, data=votes.06) # sure is
array(data = c(1:36), dim = c(3, 3, 4))
simple_array <- array(data = c(1:36), dim = c(3, 3, 4))
simple_array[1,,]
simple_array[,1,]
simple_array[,,1]
simple_array[,1,] #
simple_array <- array(data = c(1:36), dim = c(3, 3, 4))
simple_array[1,,] #first row from each "matrix"
simple_array[,1,] #first column from each "matrix"
simple_array[,,1] #first "matrix"
data()
View(Titanic)
## Lets visualize this with some pre-stored R data
data()
data(mtcars)
data(mtcars)
mtcars
dim(mtcars)
ncol(mtcars)
View(mtcars)
names(mtcars)
mtcars[,1]
mtcars$hp
mtcars[,1]
mtcars[,5]
mtcars[,4]
mean(mtcars$hp)
var(mtcars$mpg)
var(mtcars$mpg)
class(mtcars)
cbind(mtcars, sample(x = c(10000, 100000), size = 32))
cbind(mtcars, sample(x = c(10000:100000), size = 32))
mtcars <- cbind(mtcars, sample(x = c(10000:100000), size = 32))
names(mtcars)
mtcars$hp/mtcars$mpg
## We can multiply/divide/add/subtract columns
mtcars$hp/mtcars$wt
mtcars$wt
mtcars$hp/(mtcars$wt*1000)
my_list <- list("a", 1, TRUE, 1+3i)
class(my_list)
my_list
my_list[1]
my_list[[1]]
class(my_list[1])
class(my_list[[1]])
my_list$newvar <- "Christian"
View(my_list)
my_list$name <- "Christian"
my_list <- list(letter = "a", num = 1, boolean = TRUE, complex = 1+3i)
class(my_list)
class(my_list[1])
class(my_list[[1]])
my_list$name <- "Christian"
my_list
my_list[[1]][2] <- "b"
my_list
